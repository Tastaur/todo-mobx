{"version":3,"sources":["component/NavBar/NavBar.tsx","component/TodoItem/TextWrapper.tsx","component/TodoItem/ButtonCont.tsx","component/TodoItem/TodoItem.tsx","component/TodoList/TodoList.tsx","component/InputField/InputField.tsx","store/TodoStore.ts","component/Indicator/Indicator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","AppBar","position","Toolbar","variant","Typography","color","Component","TextWrapper","observer","style","width","align","this","props","isFinish","verticalAlign","fontSize","text","time","people","ButtonCont","display","Button","onClick","toggleStatus","id","deleteTodo","TodoItem","margin","justifyContent","alignItems","TodoList","list","map","t","key","store","isComplete","task","InputField","executors","e","MenuItem","name","value","flexDirection","TextField","placeholder","onChange","Select","disableUnderline","changePeople","disabled","addNewTodo","err","todoStore","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","todoList","length","filter","observable","computed","action","currentTarget","textContent","todo","Math","random","unshift","num","Indicator","allTask","finishTask","tdStore","App","className","execturors","newTodo","changeText","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd8b2b91.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {AppBar} from '@material-ui/core';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nclass NavBar extends Component {\n    render() {\n        return (\n            <AppBar position=\"sticky\">\n                <Toolbar variant=\"dense\">\n                    <Typography variant=\"h6\" color=\"inherit\">\n                        Список дел на сегодня\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        )\n            ;\n    }\n}\n\nexport default NavBar\n","import React, {Component} from 'react';\nimport {Typography} from '@material-ui/core';\nimport {observer} from 'mobx-react';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\ninterface ITextWrapper {\n    text: string,\n    time: string,\n    id?: number,\n    isFinish: boolean,\n    people: string,\n}\n\n@observer export default class TextWrapper extends Component<ITextWrapper> {\n    render() {\n        return (\n            <div style={{width: '500px'}}>\n                <Typography variant='subtitle1' align='left' color={!this.props.isFinish ? 'textPrimary' : 'error'}>\n                    <FiberManualRecordIcon style={{verticalAlign: 'middle'}} fontSize='small'/> {this.props.text}\n                </Typography>\n                <Typography variant='subtitle2' align='left' color={!this.props.isFinish ? 'textSecondary' : 'error'}>\n                    Дата создания: {this.props.time}\n                </Typography>\n                <Typography variant='subtitle2' align='left' color={!this.props.isFinish ? 'textSecondary' : 'error'}>\n                    Ответственный: {this.props.people === \"Выберите исполнителя\" ? 'Общая задача' : this.props.people}\n                </Typography>\n            </div>\n\n        );\n    }\n\n}\n","import React, {Component} from 'react';\nimport {Button} from '@material-ui/core';\nimport {observer} from 'mobx-react';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\ninterface IButtonCont {\n    id: number,\n    isFinish: boolean,\n    deleteTodo: (i: number) => void,\n    toggleStatus: (i: number) => void,\n}\n\n@observer export default class ButtonCont extends Component<IButtonCont> {\n    render() {\n        return (\n            <div style={{display:'flex'}}>\n                <Button onClick={() => this.props.toggleStatus(this.props.id)}>{!this.props.isFinish ?\n                    <CheckIcon color='primary'/> : <CloseIcon color='primary'/>}</Button>\n                <Button onClick={() => this.props.deleteTodo(this.props.id)}><DeleteIcon color='error'/></Button>\n            </div>\n\n        );\n    }\n\n}\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react';\nimport TextWrapper from './TextWrapper';\nimport ButtonCont from './ButtonCont';\n\ninterface IItem {\n    text: string,\n    time: string,\n    id: number,\n    isFinish: boolean,\n    deleteTodo: (i: number) => void,\n    people: string,\n    toggleStatus: (i: number) => void,\n}\n\n@observer export default class TodoItem extends Component<IItem> {\n    render() {\n        return (\n            <div style={{display: 'flex', margin: '0 auto', justifyContent: 'center', alignItems: 'center'}}>\n                <TextWrapper\n                             isFinish={this.props.isFinish}\n                             text={this.props.text}\n                             time={this.props.time}\n                             id={this.props.id}\n                             people={this.props.people}\n                />\n             <ButtonCont isFinish={this.props.isFinish} toggleStatus={this.props.toggleStatus} id={this.props.id} deleteTodo={this.props.deleteTodo}/>\n            </div>\n        );\n    }\n\n}\n","import React, {Component} from 'react';\nimport TodoItem from '../TodoItem/TodoItem';\nimport {observer} from 'mobx-react';\n\ninterface IList {\n    list: any[],\n    store: any,\n}\n\n\n@observer\nclass TodoList extends Component<IList> {\n    render() {\n        let list = this.props.list.map(t => <TodoItem time={t.time}\n                                                      key={t.id}\n                                                      deleteTodo={this.props.store.deleteTodo}\n                                                      isFinish={t.isComplete}\n                                                      text={t.task}\n                                                      toggleStatus={this.props.store.toggleStatus}\n                                                      id={t.id}\n                                                      people={t.people}\n        />)\n\n        return (\n            <div style={{width:\"500px\"}}>\n                {list}\n            </div>\n        );\n    }\n\n}\n\nexport default TodoList\n","import React, {Component} from 'react';\nimport {Button, MenuItem, Select, TextField, Typography} from '@material-ui/core';\nimport {observer} from 'mobx-react';\n\ninterface IInputField {\n    value: any,\n    onChange: (e: any) => void,\n    addNewTodo: () => void,\n    people: string,\n    changePeople: (e: any) => void,\n    executors: any[],\n    err: string,\n}\n\nclass InputField extends Component<IInputField> {\n    render() {\n        let executors = this.props.executors.map(e => <MenuItem key={e.name} value={e.name}>{e.name}</MenuItem>)\n        return (<div style={{display: 'flex', width: '400px', flexDirection: 'column', margin: '0 auto'}}>\n                <TextField placeholder='Что нужно сделать?'\n                           onChange={this.props.onChange}\n                           value={this.props.value}\n                />\n                <Select disableUnderline style={{margin: '30px 0'}} placeholder={'Выберите исполнителя'}\n                        value={this.props.people}\n                        onChange={this.props.changePeople}\n                >\n                    {executors}\n                    <MenuItem value='Выберите исполнителя'\n                              style={{display: 'none'}}\n                              disabled={true}\n                    >Выберите\n                        исполнителя</MenuItem>\n                </Select>\n                <Button onClick={this.props.addNewTodo}> Добавить задачу </Button>\n                {this.props.err && <Typography variant='subtitle1' color='error'>\n                    {this.props.err}\n                </Typography>}\n            </div>\n        );\n    }\n\n}\n\nexport default observer(InputField)\n","import {action, computed, observable} from 'mobx'\n\n\nclass TodoStore {\n    @observable todoList: any[] = []\n    @observable text = ''\n    @observable people = 'Выберите исполнителя'\n    @observable execturors: any[] = [\n        {\n            name: 'Вася'\n        },\n        {\n            name: \"Петя\"\n        },\n        {\n            name: 'Сережа'\n        },\n    ]\n\n    @observable err = ''\n\n    @computed get time() {\n        let date = new Date()\n        return `${date.getDate()}.${date.getMonth()}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\n    }\n\n    @computed get allTask() {\n        return this.todoList.length\n    }\n\n    @computed get finishTask() {\n        return this.todoList.filter(t => t.isComplete).length\n    }\n\n    @action changePeople = (e: any) => {\n        this.people = e.currentTarget.textContent\n    }\n    @action changeText = (e: any) => {\n        this.text = e.currentTarget.value\n    }\n    @action newTodo = () => {\n        if (this.text) {\n            let todo = {\n                task: this.text,\n                id: Math.random(),\n                isComplete: false,\n                time: this.time,\n                people: this.people\n            }\n            this.todoList.unshift(todo)\n            this.text = ''\n            this.people = 'Выберите исполнителя'\n            this.err = ''\n        } else {\n            this.err = 'Необходимо написать задачу'\n        }\n    }\n    @action toggleStatus = (id: number) => {\n        this.todoList.map(t => {\n            if (t.id === id) {\n                t.isComplete = !t.isComplete\n            }\n            return t\n        })\n    }\n    @action deleteTodo = (num: number) => {\n        this.todoList = this.todoList.filter(t => t.id !== num)\n    }\n}\n\nexport const todoStore = new TodoStore()\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react';\nimport {Typography} from '@material-ui/core';\n\ninterface IIndicator {\n    allTask: number,\n    finishTask: number,\n\n}\n\n@observer export default class Indicator extends Component<IIndicator> {\n    render() {\n        return (\n            <div>\n                <Typography variant='subtitle2'>\n                    Всего задач: {this.props.allTask}, выполено: {this.props.finishTask}\n                </Typography>\n            </div>\n        );\n    }\n\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport NavBar from './component/NavBar/NavBar';\nimport {observer} from 'mobx-react';\nimport TodoList from './component/TodoList/TodoList';\nimport InputField from './component/InputField/InputField';\nimport {todoStore} from './store/TodoStore';\nimport Indicator from './component/Indicator/Indicator';\n\nlet tdStore = todoStore\n\n@observer\nclass App extends Component {\n\n    render() {\n        let store = tdStore\n        return (\n            <div className=\"App\">\n                <NavBar/>\n                <div className='wrapper'>\n                    <div>\n                        <InputField people={store.people}\n                                    executors={store.execturors}\n                                    changePeople={store.changePeople}\n                                    value={store.text}\n                                    addNewTodo={store.newTodo}\n                                    onChange={store.changeText}\n                                    err={store.err}\n                        />\n                    </div>\n                    <div>\n                        {store.todoList.length === 0 ? \"Добавьте задачу\" : <TodoList store={store} list={store.todoList}/>\n                        }\n                        {store.todoList.length ? <Indicator allTask={store.allTask} finishTask={store.finishTask}/> : ''}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}